# Git总结(版本控制软件)
- [Git总结(版本控制软件)](#git总结版本控制软件)
  - [1.基础概念](#1基础概念)
    - [1.0版本号](#10版本号)
      - [1.0.1版本号_文件操作](#101版本号_文件操作)
        - [1.0.1.1 文件增加后版本号变化](#1011-文件增加后版本号变化)
        - [1.0.1.2 文件修改后版本号变化](#1012-文件修改后版本号变化)
        - [1.0.1.3 文件删除后版本号变化](#1013-文件删除后版本号变化)
      - [1.0.2版本号_分支操作](#102版本号_分支操作)
    - [1.1 CRUD增删改](#11-crud增删改)
    - [1.2 多分支相同文件合并到主库冲突时](#12-多分支相同文件合并到主库冲突时)
    - [1.3 手动打标签](#13-手动打标签)
    - [1.4 本地仓库与远程仓库交互](#14-本地仓库与远程仓库交互)
    - [1.5 多文件修改](#15-多文件修改)
- [p17-18等idea下好重新学习](#p17-18等idea下好重新学习)
    - [1.6 IDEA开发工具与github的集成](#16-idea开发工具与github的集成)
    - [1.7 IDEA开发工具与gitee的集成](#17-idea开发工具与gitee的集成)
  - [2 细节](#2-细节)
    - [2.1 客户端创建页面](#21-客户端创建页面)
  - [3.指令(命令行下)](#3指令命令行下)
    - [3.1 创建+初始化 init](#31-创建初始化-init)
    - [3.2 远程仓库下载到本地 clone](#32-远程仓库下载到本地-clone)
    - [3.3 仓库配置](#33-仓库配置)
    - [3.4 暂存区相关](#34-暂存区相关)
      - [3.4.1 删除相关](#341-删除相关)
      - [3.4.2 分支相关](#342-分支相关)
      - [3.4.3 标签相关](#343-标签相关)
      - [3.4.4 远程仓库](#344-远程仓库)
  - [4.问题及解决](#4问题及解决)
    - [4.1本地仓库在https下无法推送到远程仓库](#41本地仓库在https下无法推送到远程仓库)

## 1.基础概念
1.集中式版本控制
CVS
SVN

2.分布式版本控制
(中央服务器和本地均有资源库)

### 1.0版本号
1.git版本号由40个16进制的数字组成，称为提交码
2.基于SHA-1加密算法得到40位16进制版本号(处理不同仓库中相同版本号，合并时避免版本冲突 如仓库1的v1.0与仓库2的v1.0的合并)
3.定位仓库中的文件(2+38)
前2位:文件夹
后38位:文件名

//对应仓库文件夹下
./.git/objects/xx/...找版本号对应文件

#### 1.0.1版本号_文件操作
```
//命令行下
三者关联
提交信息--->文件状态--->文件内容

tree后面的版本号表示文件状态
parent后面的版本号表示上一次提交的文件状态

1.在仓库根目录中右键--->Git Bash Here
                 --->命令行中输入命令 git cat-file -p xx(对应文件40位版本号)

输出信息中 tree xx(文件状态版本号a)

2.然后输入命令 git cat-file -p a(tree对应版本号)
输出信息中 (固定搭配)100(表示普通文件)644(文件权限) blob(当前是普通文件块对象) + b版本号 + 刚提交的文件.xx

3.然后输入命令 git cat-file -p b(2对应版本号)
输出的即为文件内容
```
##### 1.0.1.1 文件增加后版本号变化
```
新增一个parent x(版本号) ：上一次提交的版本号

2.然后输入命令 git cat-file -p a(tree对应版本号)
输出信息中 (固定搭配)100(表示普通文件)644(文件权限) blob(当前是普通文件块对象) + b版本号 + 刚提交的文件.xx
此时有两个文件内容的信息：初次提交和本次修改的文件
```

##### 1.0.1.2 文件修改后版本号变化
```
新增一个parent x(版本号) ：上一次提交的版本号

2.然后输入命令 git cat-file -p a(tree对应版本号)
输出信息中 (固定搭配)100(表示普通文件)644(文件权限) blob(当前是普通文件块对象) + b版本号 + 刚提交的文件.xx
此时有两个文件内容的信息：初次提交和本次修改的文件
```
##### 1.0.1.3 文件删除后版本号变化
```
新增一个parent x(版本号) ：上一次提交的版本号

2.然后输入命令 git cat-file -p a(tree对应版本号)
输出信息中 (固定搭配)100(表示普通文件)644(文件权限) blob(当前是普通文件块对象) + b版本号 + 刚提交的文件.xx
此时有1个文件内容的信息：初次提交的文件
```
#### 1.0.2版本号_分支操作
1.找出最新提交信息
```
.git/HEAD
该文件内容为最新提交信息的文件路径(在.git/文件夹下)(ref: refs/heads/main)
指main分支下的最新提交，如果有新的分支user并且切换到分支user，则HEAD文件中内容变化为(ref: refs/heads/user)
不同分支可对应相同提交，不同分支也可指向不同版本(不同分支最新提交记录可以不同)
打开对应文件，内容即为最新提交记录的版本号
```


### 1.1 CRUD增删改
文件夹内操作后 在github客户端changes->summary+Description后点击Commit to main

### 1.2 多分支相同文件合并到主库冲突时
处理方法
```
1.点击open in sublime 
2.删去<<<<<<HEAD ====== >>>>>>> 分支名
3.修改想要保存的内容并保存
4.完成merge
```

### 1.3 手动打标签
步骤
```
1.在history中右键修改记录
2.点击create tag
3.输入内容
4.完成
5.删除的话右键--->delete tag xxx
```
### 1.4 本地仓库与远程仓库交互
```
1.远程仓库(github网页)
2.本地仓库(客户端)

3.将远程仓库拉到本地
客户端--->file--->clone repository 

4.本地仓库同步推送到远程仓库
commit时点击push origin(github)
或者
publish branch(gitee等其他平台)
或者
ctrl+p(快捷键)

5.clone gitee或其他平台仓库
客户端--->file--->clone repository--->url(复制对应仓库url) 
```
### 1.5 多文件修改
```
客户端changes处图标
红色表示删除
黄色表示修改
绿色表示增加
```
# p17-18等idea下好重新学习
### 1.6 IDEA开发工具与github的集成
```
```

### 1.7 IDEA开发工具与gitee的集成
```
```

## 2 细节
### 2.1 客户端创建页面
```
1.过程
file--->new repositroy--->...

//git本质：代码托管平台
//git修改时比对仅针对文本文件(知道改了什么)，.doc 图片等的修改无法比对(知道修改，但不知道具体改了什么内容)

README 仓库简介

Git ignore 忽略部分文件类型(某种后缀)
```

## 3.指令(命令行下)
鼠标右键--->git bash here
### 3.1 创建+初始化 init
1.创建一个空文件夹(假如名称local_rep_1)
2.在空文件夹中 鼠标右键--->git bash here
3.输入命令 
```
git init
```      
4.初始化仓库成功(多了一个.git文件夹)
// 图形化界面新建仓库会有初次提交.gitattributes
//而命令行创建的仓库是无提交记录的空仓库
### 3.2 远程仓库下载到本地 clone
1.鼠标右键--->git bash here
2.输入命令 
```
1.git clone xx(远程仓库地址，在github或gitee网站中对应仓库处复制https形式下的地址)
或者改名clone到本地
2.git clone xx(远程仓库地址) yy(更改后到本地的名字)
```  
3.远程仓库clone到本地

### 3.3 仓库配置
命令行中
```
//单个仓库中
在对应仓库.git/config文件中手动修改
1.git config user.name xx(名称)
2.git config user.email xx(邮件地址)

//全部仓库配置
在c盘/用户/.gitconfig文件中手动修改
1.git config --global user.name xx(名称)
2.git config --global user.email xx(邮件地址)
```

### 3.4 暂存区相关
区域：存储区域---暂存区---工作区
```
1.git status 查看暂存区状态

2.先在文件夹中手动对文件操作(工作区操作)
然后执行指令git add xx 
把xx文件从工作区放到暂存区做比对操作
//进阶：git add *.txt 把所有txt文件从工作区放到暂存区做比对操作

3.git rm --cached xx 把xx文件从暂存区移回工作区(实际上就是从暂存区删去xx文件)

4.git commit -m xx文件(提交信息描述,删除新增等)(从暂存区放入仓库存储区域)

5.git log 
查看历史提交记录
//进阶：git log --oneline   (每次提交记录用一行表示)
```
#### 3.4.1 删除相关
```
1.误删除后从存储区恢复到工作区
git restore xx(文件名)

2.恢复到指定版本(但会丢失当前版本到指定版本中间提交过程)
git reset --hard xx(指定版本号前7位)

3.还原(恢复到指定版本xx之前的一个版本,同时保留历次提交记录)会出现一个文件，关闭即可
git revert xx(某版本号)
```

#### 3.4.2 分支相关
命令行下初始化仓库为空，需要先进行提交操作才能初始化master分支并进行新建分支操作
```
1.新建分支xx
git branch xx

2.查看总分支数(一行表示一个分支，*表示当前分支)
git branch -v

3.切换到分支xx
git checkout xx

4.创建并切换分支xx
git checkout -b xx
//进阶：利用标签创建分支
git checkout -b tag标签名字

5.删除分支xx
git branch xx
```
//进阶_合并相关
```
1.a分支合并到b分支下
先切换到b分支 git checkout b
然后
git merge a
//进阶(a分支合并到b分支下)
若a b分支含有相同文件c.txt但内容不同，则合并失败
sol:1.在b分支的文件夹中手动修改c.txt至最终版本
    2.然后手动提交
        git add c.txt
        git commit -m 本次提交描述信息
    3.合并完成
```

#### 3.4.3 标签相关
eg:1.标签名不重复
```
1.打标签(将版本号和标签等价，相当于typedef struct tag1 xx版本号)
git tag xx(标签名) xxxx(版本号)

2.用标签查询提交记录(该标签及其之前的所有记录)
git log xx标签

3.查询当前提交记录标签名
git tag

4.删除标签xx
git tag -d xx
```

#### 3.4.4 远程仓库
orign表示远程地址名称
```
1.增加远程仓库地址
git remote add origin xx(地址)

2.本地仓库内容推送到远程仓库
git push origin

3.远程仓库地址为ssh形式下生成安全证书
步骤
命令行内:ssh-keygen -t rsa -Cxxx(远程仓库地址)
然后在我的电脑---C盘---用户---.ssh---id_rsa.pub 内容复制
然后在gitee网站设置中找到安全设置---SSH公钥，在公钥处粘贴---确定 
最终完成安全证书认证
命令行内:git push origin完成推送

4.远程仓库拉取文件到本地仓库
git pull origin
```

## 4.问题及解决
### 4.1本地仓库在https下无法推送到远程仓库
即执行指令 git push origin失败
相关描述 fatal: unable to access 'https://github.com/rushBg0g0g0/Study_Notes.git/': Failed to connect to github.com port 443 after 21094 ms: Couldn't connect to server

解决：在命令行中键入
git config --global --unset http.proxy
git config --global --unset https.proxy
以此取消http和https的代理

